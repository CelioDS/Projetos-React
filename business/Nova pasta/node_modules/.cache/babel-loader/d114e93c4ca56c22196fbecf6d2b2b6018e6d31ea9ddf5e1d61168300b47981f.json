{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\celio\\\\node\\\\bd\\\\src\\\\componentes\\\\routes\\\\Cadastrar.js\",\n  _s = $RefreshSig$();\nimport style from \"./Cadastrar.module.css\";\nimport Container from \"../layout/Container\";\nimport Input from \"../layout/Input\";\nimport { useState } from \"react\";\nimport databasel from \"../bd/databaseLocal.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Cadastrar() {\n  _s();\n  const [database, setDatabase] = useState(databasel);\n\n  // Define o estado inicial do formulário\n  const [formData, setFormData] = useState({\n    id: \"\",\n    nome: \"\",\n    localidade: \"\",\n    contatos: \"\",\n    setor: \"\",\n    visao: \"\",\n    fundada: \"\"\n  });\n  const [btnText, setBtnTexto] = useState(\"Enviar\");\n\n  // Atualiza o estado do formulário quando um campo é alterado\n  const handleChange = event => {\n    if (event.target.value === \"contatos\") {\n      setFormData({\n        ...formData,\n        [event.target.name]: event.target.value\n      });\n    } else {\n      const capitalizedValue = event.target.value.charAt(0).toUpperCase() + event.target.value.slice(1);\n      setFormData({\n        ...formData,\n        [event.target.name]: capitalizedValue\n      });\n    }\n  };\n\n  // Manipula o envio do formulário\n  const handleSubmitForm = async event => {\n    event.preventDefault();\n    try {\n      setBtnTexto(\"Enviando...\");\n      // Envia uma requisição POST para a URL especificada\n      const response = await fetch(\"http://localhost:5000/usuarios\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(formData)\n      });\n\n      // Trata a resposta da requisição (pode ser necessário ajustar de acordo com a API)\n      const data = await response.json();\n\n      // Atualiza o estado do formulário com os dados recebidos\n      setFormData(data);\n\n      // Adiciona o formData ao array do banco de dados\n      setDatabase([...database, formData]);\n\n      // Atualiza o texto do botão após o envio\n      setBtnTexto(\"Enviado com sucesso!\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: style.father,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Cadastrar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmitForm,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: style.btn,\n          children: btnText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(Cadastrar, \"ZrynwF4bXzRBY5+HHHYA1owJ1kc=\");\n_c = Cadastrar;\nvar _c;\n$RefreshReg$(_c, \"Cadastrar\");","map":{"version":3,"names":["style","Container","Input","useState","databasel","jsxDEV","_jsxDEV","Cadastrar","_s","database","setDatabase","formData","setFormData","id","nome","localidade","contatos","setor","visao","fundada","btnText","setBtnTexto","handleChange","event","target","value","name","capitalizedValue","charAt","toUpperCase","slice","handleSubmitForm","preventDefault","response","fetch","method","headers","body","JSON","stringify","data","json","error","console","log","children","className","father","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","btn","_c","$RefreshReg$"],"sources":["C:/Users/celio/node/bd/src/componentes/routes/Cadastrar.js"],"sourcesContent":["import style from \"./Cadastrar.module.css\";\r\nimport Container from \"../layout/Container\";\r\nimport Input from \"../layout/Input\";\r\nimport { useState } from \"react\";\r\nimport databasel from \"../bd/databaseLocal.json\";\r\n\r\nexport default function Cadastrar() {\r\n  const [database, setDatabase] = useState(databasel);\r\n\r\n  // Define o estado inicial do formulário\r\n  const [formData, setFormData] = useState({\r\n    id: \"\",\r\n    nome: \"\",\r\n    localidade: \"\",\r\n    contatos: \"\",\r\n    setor: \"\",\r\n    visao: \"\",\r\n    fundada: \"\",\r\n  });\r\n\r\n  const [btnText, setBtnTexto] = useState(\"Enviar\");\r\n\r\n  // Atualiza o estado do formulário quando um campo é alterado\r\n  const handleChange = (event) => {\r\n    if (event.target.value === \"contatos\") {\r\n      setFormData({ ...formData, [event.target.name]: event.target.value });\r\n    } else {\r\n      const capitalizedValue =\r\n        event.target.value.charAt(0).toUpperCase() +\r\n        event.target.value.slice(1);\r\n      setFormData({ ...formData, [event.target.name]: capitalizedValue });\r\n    }\r\n  };\r\n\r\n  // Manipula o envio do formulário\r\n  const handleSubmitForm = async (event) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      setBtnTexto(\"Enviando...\");\r\n      // Envia uma requisição POST para a URL especificada\r\n      const response = await fetch(\"http://localhost:5000/usuarios\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(formData),\r\n      });\r\n\r\n      // Trata a resposta da requisição (pode ser necessário ajustar de acordo com a API)\r\n      const data = await response.json();\r\n\r\n      // Atualiza o estado do formulário com os dados recebidos\r\n      setFormData(data);\r\n\r\n      // Adiciona o formData ao array do banco de dados\r\n      setDatabase([...database, formData]);\r\n\r\n      // Atualiza o texto do botão após o envio\r\n      setBtnTexto(\"Enviado com sucesso!\");\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <div className={style.father}>\r\n        <h1>Cadastrar</h1>\r\n        <form onSubmit={handleSubmitForm}>\r\n          {/* Componentes de entrada de texto */}\r\n          {/* ... */}\r\n          {/* Botão de envio do formulário */}\r\n          <button className={style.btn}>{btnText}</button>\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}